{
    "abs": 
    {
        "prefix": "abs",
        "body": 
        [
           "abs\t\\$$1, \\$$2"
        ],
        "description": "abs\trdest, rsrc\nrdest = abs(rsrc)"
    },
    "add":
    {
        "prefix": "add",
        "body":
        [
            "add\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "add\trd, rs, rt\nrd = rs + rt"
    },
    "addu":
    {
        "prefix": "addu",
        "body":
        [
            "addu\t\\$$1, \\$$2, \\$$3"
        ],
        "description":"addu\trd, rs, rt\nrd = rs + rt"
    },
    "addi":
    {
        "prefix": "addi",
        "body":
        [
            "addi\t\\$$1, \\$$2, $3"
        ],
        "description":"addi\trd, rs, imm\nrd = rs + Sign-Extended-Immeditate"
    },
    "addiu":
    {
        "prefix": "addiu",
        "body":
        [
            "addiu\t\\$$1, \\$$2, $3"
        ],
        "description":"addiu\trd, rs, imm\nrd = rs + Sign-Extended-Immeditate"
    },
    "and":
    {
        "prefix": "and",
        "body":
        [
            "and\t\\$$1, \\$$2, \\$$3"
        ],
        "description":"and\trd, rs, rt\nrd = rs & rt"
    },
    "andi":
    {
        "prefix": "andi",
        "body": 
        [
            "andi\t\\$$1, \\$$2, $3"
        ],
        "description":"andi\trd, rs, rt\nrd = rs & Zero-Extended-Immeditate"
    },
    "clo":
    {
        "prefix": "clo",
        "body":
        [
            "clo\t\\$$1, \\$$2"
        ],
        "description": "clo\trd, rs\nCount the number of leading ones in the word in the register rs and put the result into register rd"
    },
    "clz":
    {
        "prefix": "clz",
        "body":
        [
            "clz\t\\$$1, \\$$2"
        ],
        "description": "clz\trd, rs\nCount the number of leading zeros in the word in the register rs and put the result into register rd"
    },
    "div":
    {
        "prefix": "div",
        "body": 
        [
            "div\t\\$$1, \\$$2"
        ],
        "description": "div\trs, rt\nDivide register rs by register rt,Leave the quotient in register lo and the remainder in register hi"
            
    },
    "div-pseudo":
    {
        "prefix": "div",
        "body": 
        [
            "div\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "div\trdest, rsrc1, src2\nPut the quotient of the register rsrc1 and src2 into register rdest"
    },
    "divu":
    {
        "prefix": "divu",
        "body": 
        [
            "divu\t\\$$1, \\$$2"
        ],
        "description": "divu\trs, rt\nDivide register rs by register rt,Leave the quotient in register lo and the remainder in register hi"
    },
    "divu-pseudo":
    {
        "prefix": "divu",
        "body": 
        [
            "divu\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "divu\trdest, rsrc1, src2\nPut the quotient of the register rsrc1 and src2 into register rdest"
    },
    "mult":
    {
        "prefix": "mult",
        "body": 
        [
            "mult\t\\$$1, \\$$2"
        ],
        "description": "mult\trs, rt\nMultiply rgeister rs and rt,Leave the low-order word of the product in register lo and the high-order word in register hi"
    },
    "multu":
    {
        "prefix": "multu",
        "body": 
        [
            "multu\t\\$$1, \\$$2"
        ],
        "description": "multu\trs, rt\nMultiply rgeister rs and rt,Leave the low-order word of the product in register lo and the high-order word in register hi"
    },
    "mul":
    {
        "prefix": "mul",
        "body":
        [
            "mul\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "mul\trd, rs, rt\nPut the low-order 32 bits of the product of rs ans rt into register rd"
    },
    "mulo":
    {
        "prefix": "mulo",
        "body":
        [
            "mulo\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "mulo\trdest,rsrc1,src1\nPut the low-order 32 bits of the product of rsrc1 ans src2 into register rdest"
    },
    "mulou":
    {
        "prefix": "mulou",
        "body":
        [
            "mulou\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "mulou\trdest, rsrc1, src2\nPut the low-order 32 bits of the product of rsrc1 ans src2 into register rdest"
    },
    "madd":
    {
        "prefix": "madd",
        "body":
        [
            "madd\t\\$$1, \\$$2"
        ],
        "description": "madd\trs, rt\nMultiply register rs and rt and add the resulting 64-bit product to the 64-bit value in the concatenated registers lo and hi"
    },
    "maddu":
    {
        "prefix": "maddu",
        "body":
        [
            "maddu\t\\$$1, \\$$2"
        ],
        "description": "madd\trs, rt\nMultiply register rs and rt and add the resulting 64-bit product to the 64-bit value in the concatenated registers lo and hi"
    },
    "msub":
    {
        "prefix": "msub",
        "body": 
        [
            "msub\t\\$$1, \\$$2"
        ],
        "description": "msub\trs, rt\nMultiply register rs and rt and subtract the resulting 64-bit product to the 64-bit value in the concatenated registers lo and hi"
    },
    "neg": 
    {
        "prefix": "neg",
        "body":
        [
            "neg\t\\$$1, \\$$2"
        ],
        "description": "neg\trdest, rsrc\nPut the negative of rsrc into register rdest"
    },
    "negu":
    {
        "prefix": "negu",
        "body":
        [
            "negu\t\\$$1, \\$$2"
        ],
        "description": "negu\trdest, rsrc\nPut the negative of rsrc into register rdest"
    },
    "nor":
    {
        "prefix": "nor",
        "body": 
        [
            "nor\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "nor\trd, rs, rt\nPut the logical NOR of registers rs and rt into register rd"
    },
    "not":
    {
        "prefix": "not",
        "body":
        [
            "not\t\\$$1, \\$$2"
        ],
        "description": "not\trdest, rsrc\nPut the bitwise logical negation of register rsrc into register rdest"
    },
    "or":
    {
        "prefix": "or",
        "body":
        [
            "or\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "or\trd, rs, rt\nPut the logical OR of register rs and rt into register rd"
    },
    "ori":
    {
        "prefix": "ori",
        "body":
        [
            "ori\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "ori\trt, rs, imm\nPut the logical OR of register rs and the zero-extended immediate into register rt"
    },
    "rem":
    {
        "prefix": "rem",
        "body":
        [
            "rem\t\\$$1,\\$$2,\\$3"
        ],
        "description": "rem\trdest, rsrc1, rsrc2\nPut the reminder of register rsrc1 divided by register rsrc2 into register rdest"
    },
    "remu":
    {
        "prefix": "remu",
        "body":
        [
            "remu\t\\$$1,\\$$2,\\$3"
        ],
        "description": "remu\trdest, rsrc1, rsrc2\nPut the reminder of register rsrc1 divided by register rsrc2 into register rdest"
    },
    "sll":
    {
        "prefix": "sll",
        "body":
        [
            "sll\t\\$$1, \\$$2, $3"
        ],
        "description": "sll\trd, rt, shamt\nShift register rt left by the distance indicate by immediate shamt and put the result in register rd"
    },
    "sllv":
    {
        "prefix": "sllv",
        "body": 
        [
            "sllv\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sllv\trd, rt, rs\nShift register rt left by the distance indicate by register rs and put the result in register rd"
    },
    "sra":
    {
        "prefix": "sra",
        "body":
        [
            "sra\t\\$$1, \\$$2, $3"
        ],
        "description": "sra\trd, rt, shamt\nShift register right by the dis"
    },
    "comment: some arithmetic and logical instruction have not snippet":
    {

    },
    "lui":
    {
        "prefix": "lui",
        "body":
        [
            "lui\t\\$$1, $2"
        ],
        "description":"lui\trt,imm\nLoad the lower halfword of the immediate imm into the upper halfword of register rt"
    },
    "li":
    {
        "prefix": "li",
        "body":
        [
            "li\t\\$$1, $2"
        ],
        "description":"li\trdest, imm\nMove the immediate into register rdest"
    },
    "slt":
    {
        "prefix": "slt",
        "body": 
        [
            "slt\t\\$$1, \\$$2, \\$$3"
        ],
        "description":"slt\trd, rs, rt\nSet register rd to 1 if regsiter rs is less than rt, and to 0 otherwise"
    },
    "sltu":
    {
        "prefix": "sltu",
        "body":
        [
            "sltu\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sltu\trd, rs, rt\nSet register rd to 1 if register rs is less than rt"
    },
    "slti":
    {
        "prefix": "slti",
        "body":
        [
            "slti\t\\$$1, \\$$2, $3"
        ],
        "description": "slti\trt, rs, imm\nSet register rt to 1 if register rs is less than the sign-extended immediate,and to 0 otherwise"
    },
    "sltiu":
    {
        "prefix": "sltiu",
        "body":
        [
            "sltiu\t\\$$1, \\$$2, $3"
        ],
        "description": "sltiu\trt, rs, imm\nSet register rt to 1 if register rs is less than the sign-extended immediate,and to 0 otherwise"
    },
    "seq":
    {
        "prefix": "seq",
        "body" :
        [
            "seq\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "seq\trdest, rsrc1, rsrc2\nSet register rdest to 1 if register rsrc1 equals rsrc2,and to 0 otherwise"
    },           
    "sge":
    {
        "prefix": "sge",
        "body":
        [
            "sge\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sge\trdest, rsrc1, resrc2\nSet register rdest to 1 if regsiter rsrc1 is greater than or equal to rsrc2, and to 0 otherwise"
    },
    "sgeu":
    {
        "prefix": "sgeu",
        "body":
        [
            "sgeu\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sgeu\trdest, rsrc1, resrc2\nSet register rdest to 1 if regsiter rsrc1 is greater than or equal to rsrc2, and to 0 otherwise"
    },
    "sgt":
    {
        "prefix": "sgt",
        "body":
        [
            "sgt\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sgt\trdest, rsrc1, rsrc2\nSet register rdest to 1 if rsrc1 is greater than rsrc2, and to 0 otherwise"
    },
    "sgtu":
    {
        "prefix": "sgtu",
        "body":
        [
            "sgtu\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sgtu\trdest, rsrc1, rsrc2\nSet register rdest to 1 if rsrc1 is greater than rsrc2, and to 0 otherwise"
    },
    "sle":
    {
        "prefix": "sle",
        "body":
        [
            "sle\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sle\trdest, rsrc1, rsrc2\nSet register rdest to 1 if rsrc1 is less than or equal to rsrc2, and to 0 otherwise"
    },
    "sleu":
    {
        "prefix": "sleu",
        "body":
        [
            "sleu\t\\$$1, \\$$2, \\$$3"
        ],
        "description": "sleu\trdest, rsrc1, rsrc2\nSet register rdest to 1 if rsrc1 is less than or equal to rsrc2, and to 0 otherwise"
    },
    "sne":
    {
        "prefix": "sne",
        "body":
        [
            "sne\\$$1, \\$$2, \\$$3"
        ],
        "description": "sne\trdest, rsrc1, rsrc2\nSet register rdest to 1 if rsrc1 is not equal to rsrc2,and to 0 otherwise"
    },
    "b":
    {
        "prefix": "b",
        "body":
        [
            "b\t$1"
        ],
        "description": "b\tlabel\nUnconditionally branch to the instruction at the label"
    },
    "bclf":
    {
        "prefix": "bclf",
        "body":
        [
            "bclf\tcc, $1"
        ],
        "description": "bclf\tcc, label\nConditionally branch the number of instructions specified by the offset if the floating-point coprocessor's condition flag numbered cc is false"
    },
    "bclt":
    {
        "prefix": "bclt",
        "body":
        [
            "bclt\tcc, $1"
        ],
        "description": "bclt\tcc, label\nConditionally branch the number of instructions specified by the offset if the floating-point coprocessor's condition flag numbered cc is true"
    },
    "beq":
    {
        "prefix": "beq",
        "body":
        [
            "beq\t\\$$1, \\$$2, $3"
        ],
        "description": "beq\trs, rt ,label\nConditionally branch the number of instructions specified by the offset if register rs equals rt"
    },
    "bgez":
    {
        "prefix": "bgez",
        "body":
        [
            "bgez\t\\$$1, $2"
        ],
        "description":"bgez\trs,label\nConditionally branch the number of instructions specified by the offset if register rs is greater than or equals to 0"
    },
    "bgezal":
    {
        "prefix": "bgezal",
        "body":
        [
            "bgezal\t\\$$1, $2"
        ],
        "description": "bgez\trs,label\nConditionally branch the number of instructions specified by the offset if register rs is greater than or equals to 0, Save the address of the next instruction in register 31($ra)"
    },
    "bgtz":
    {
        "prefix": "bgtz",
        "body":
        [
            "bgtz\t\\$$1, $2"
        ],
        "description": "bgtz\trs, label\nConditionally branch the number of instruction specified by the offset if register rs is greater than 0"
    },
    "blez":
    {
        "prefix": "blez",
        "body":
        [
            "blez\t\\$$1, $2"
        ],
        "description":"blez\trs,label\nConditionally branch the number of instructions specified by the offset if register rs is less than or equals to 0"
    },
    "bltzal":
    {
        "prefix": "bltzal",
        "body":
        [
            "bltzal\t\\$$1, $2"
        ],
        "description": "blez\trs,label\nConditionally branch the number of instructions specified by the offset if register rs is less than 0, Save the address of the next instruction in register 31($ra)"
    },
    "bltz":
    {
        "prefix": "bltz",
        "body":
        [
            "bltz\t\\$$1, $2"
        ],
        "description": "bltz\trs, label\nConditionally branch the number of instructions specified by the offset if register rs is less than 0"
    },
    "bne":
    {
        "prefix": "bne",
        "body":
        [
            "bne\t\\$$1, \\$$2, $3"
        ],
        "description": "bne\trs, rt, label\nConditionally branch the number of instructions sprcified by the offset if register rs is not equal to rt"
    },
    "beqz":
    {
        "prefix": "beqz",
        "body":
        [
            "beqz\t\\$$1, $2"
        ],
        "description": "beqz\trsrc, label\nConditionally branch to the instruction at the label if rsrc equals 0"
    },
    "bge":
    {
        "prefix":"bge",
        "body": 
        [
            "bge\t\\$$1, \\$$2, $3"
        ],
        "description": "bge\trsrc1, rsrc2, label\nConditionally branch to the instruction at the label if register rsrc1 is greater than or equal to rsrc2"
    },
    "bgeu":
    {
        "prefix":"bgeu",
        "body": 
        [
            "bgeu\t\\$$1, \\$$2, $3"
        ],
        "description": "bgeu\trsrc1, rsrc2, label\nConditionally branch to the instruction at the label if register rsrc1 is greater than or equal to rsrc2"
    },
    "bgt":
    {
        "prefix":"bgt",
        "body":
        [
            "bgt\\t\\$$1, \\$$2, $3"
        ],
        "description": "bgt\trsrc1, src2, label\nConditionally branch to the instruction at the label if register rsrc1 is greater than src2"
    },
    "bgtu":
    {
        "prefix": "bgtu",
        "body":
        [
            "bgtu\\t\\$$1, \\$$2, $3"
        ],
        "description": "bgtu\trsrc1, src2, label\nConditionally branch to the instruction at the label if register rsrc1 is greater than src2"
    },
    "ble":
    {
        "prefix": "ble",
        "body": 
        [
            "ble\t\\$$1, \\$$2, $3"
        ],
        "description": "ble\trsrc1, src2, label\bConditionally branch to the instruction at the label if register rsrc1 is less than or equal to src2"
    },
    "bleu":
    {
        "prefix": "bleu",
        "body": 
        [
            "bleu\t\\$$1, \\$$2, $3"
        ],
        "description": "bleu\trsrc1, src2, label\bConditionally branch to the instruction at the label if register rsrc1 is less than or equal to src2"
    },
    "blt":
    {
        "prefix": "blt",
        "body": 
        [
            "blt\t\\$$1, \\$$2, $3"
        ],
        "description": "ble\trsrc1, rsrc2, label\bConditionally branch to the instruction at the label if register rsrc1 is less than rsrc2"
    },
    "bltu":
    {
        "prefix": "bltu",
        "body":
        [
            "bltu\trsrc1, rsrc2, label\bConditionally branch to the instruction at the label if register rsrc1 is less than rsrc2"
        ]
    },
    "bnez":
    {
        "prefix": "bnez",
        "body": 
        [
            "bnez\trsrc, label"
        ],
        "description": "Conditionally branch to the instruction at the label if register rsrc is not equal to 0"
    },
    "j":
    {
        "prefix": "j",
        "body": 
        [
            "j\t$1"
        ],
        "description": "j\ttarget\nUncondition jump to the instruction at target"
    },
    "jal":
    {
        "prefix": "jal",
        "body":
        [
            "jal\t$1"
        ],
        "description": "jal\ttarget\nUnconditionallt jump to the instruction at target,Save the address of next instruction in the register 31($ra)"
    },
    "jalr":
    {
        "prefix":"jalr",
        "body":
        [
            "jalr\t\\$$1, \\$$2"
        ],
        "description": "jalr\trs, rd\nUnconditionally jump to the instruction whose address is in register rs,Save the address of next instruction in register rd"
    },
    "jr":
    {
        "prefix": "jr",
        "body": 
        [
            "jr\t\\$$1"
        ],
        "description": "jr\trs\nUnconditionally jump to the instruction whose address is in register rs"
    },
    "comment: trap,load,store,movement,floating-point instruction have not snippet":
    {

    },
    "eret":
    {
        "prefix": "eret",
        "body": 
        [
            "eret"
        ],
        "description": "Set the EXL bit in coprocess 0's Status register to 0 and return the instruction pointed to by coprocess o's EPC register"
    },
    "syscall":
    {
        "prefix": "syscall",
        "body":
        [
            "syscall"
        ],
        "description": "syscall\nLoad syscall call code to regsiter 2($v0) and ararguments to register 4-7($a0-$a3),to use operating system-like services"
    },
    "break":
    {
        "prefix": "break",
        "body":
        [
            "break\t$1"
        ],
        "description": "break\tcode\nCause exception code."
    },
    "nop":
    {
        "prefix": "nop",
        "body":
        [
            "nop"
        ],
        "description": "Do nothing"
    }
}